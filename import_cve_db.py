import os
import requests
import zipfile
import json
import sqlite3
import datetime


def download_cve_file(start_year, end_year):
    """
    Download CVE files from NVD for the specified range of years.

    Args:
        start_year (int): The starting year.
        end_year (int): The ending year.
    """
    download_url = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-{}.json.zip"
    output_folder = "cve-db"

    # Create the output folder if it doesn't exist
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for year in range(start_year, end_year + 1):
        year_str = str(year)
        url = download_url.format(year_str)
        response = requests.get(url)
        
        if response.status_code == 200:
            zip_file_path = os.path.join(output_folder, f"nvdcve-1.1-{year_str}.json.zip")
            with open(zip_file_path, 'wb') as zip_file:
                zip_file.write(response.content)
            print(f"CVE file downloaded for year {year_str} and saved as: {zip_file_path}")

            # Unzip the downloaded file
            unzip_folder = os.path.join(output_folder, f"nvdcve-1.1-{year_str}")
            with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
                zip_ref.extractall(unzip_folder)
            print(f"Unzipped CVE file saved in: {unzip_folder}")

            # Remove the downloaded ZIP file
            os.remove(zip_file_path)
            print(f"Downloaded ZIP file removed: {zip_file_path}")
        else:
            print(f"Failed to download CVE file for year {year_str}")


def import_cve_to_db():
    """
    Import CVE data from JSON files into a SQLite database.
    """
    db_file = 'cve_data.db'
    
    # Check if the database file exists
    if os.path.exists(db_file):
        print(f"Removing existing {db_file}...")
        os.remove(db_file)

    # SQLite database connection
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()

    # Create table if it doesn't exist
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS cve_data (
        cve_id TEXT PRIMARY KEY,
        description TEXT,
        base_severity TEXT,
        confidentiality_impact TEXT,
        integrity_impact TEXT,
        availability_impact TEXT
    )
    ''')

    # Folder containing CVE JSON files
    folder_path = 'cve-db/'
    today = datetime.date.today()
    current_year = today.year

    # Iterate over the files in the folder
    for year in range(2000, current_year + 1):
        file_name = f"nvdcve-1.1-{year}/nvdcve-1.1-{year}.json"
        file_path = os.path.join(folder_path, file_name)

        # Check if the file exists
        if os.path.isfile(file_path):
            # Read the JSON data from the file
            with open(file_path, 'r') as file:
                json_data = file.read()

            # Parse the JSON data
            data = json.loads(json_data)

            # Insert data into the table
            for item in data['CVE_Items']:
                cve_id = item['cve']['CVE_data_meta']['ID']
                description = item['cve']['description']['description_data'][0]['value']

                if 'baseMetricV3' in item['impact']:
                    impact = item['impact']['baseMetricV3']['cvssV3']
                elif 'baseMetricV2' in item['impact']:
                    impact = item['impact']['baseMetricV2']['cvssV2']
                else:
                    impact = {}

                base_severity = impact.get('baseSeverity', '')
                confidentiality_impact = impact.get('confidentialityImpact', '')
                integrity_impact = impact.get('integrityImpact', '')
                availability_impact = impact.get('availabilityImpact', '')

                cursor.execute('''
                INSERT INTO cve_data (cve_id, description, base_severity, confidentiality_impact,
                integrity_impact, availability_impact)
                VALUES (?, ?, ?, ?, ?, ?)
                ''', (cve_id, description, base_severity, confidentiality_impact, integrity_impact, availability_impact))

    # Commit the transaction and close the connection
    conn.commit()
    conn.close()

    print("Data imported to SQLite database.")


def main():
    # Example usage to download CVE files from 2002 to current year
    start_year = 2002
    today = datetime.date.today()
    end_year = today.year

    download_cve_file(start_year, end_year)
    import_cve_to_db()


if __name__ == "__main__":
    main()
