import os
import json
import multiprocessing
import time
import os
import requests
import zipfile
import json
import sqlite3
import datetime
import glob
from cvss import CVSS3
import concurrent.futures

def init_db():
    db_file = 'cve_data.db'

    # SQLite database connection
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()

    # Create table if it doesn't exist
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS mitre_cve (
        cve_id TEXT PRIMARY KEY,
        description TEXT,
        base_severity TEXT,
        confidentiality_impact TEXT,
        integrity_impact TEXT,
        availability_impact TEXT,
        vector TEXT,
        impact TEXT,
        state TEXT
    )
    ''')
    conn.commit()
    conn.close()

def process_cvss_vector(vector):
    c = CVSS3(vector)
    data = c.as_json()
    return data.get('confidentialityImpact', ''), data.get('integrityImpact', ''), data.get('availabilityImpact', '')
    

def get_cve_impact(json_data):
    descriptions = [desc["description"] for desc in json_data["descriptions"]]
    # Convert the descriptions to text
    impact = ", ".join(descriptions)
    return impact

def download_cve_file():
    """
    Download CVE files from NVD for the specified range of years.

    Args:
        start_year (int): The starting year.
        end_year (int): The ending year.
    """
    download_url = "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip"
    output_folder = "cve-json"

    # Create the output folder if it doesn't exist
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    response = requests.get(download_url)
    
    if response.status_code == 200:
        zip_file_path = os.path.join(output_folder, f"cvelistV5-main.zip")
        with open(zip_file_path, 'wb') as zip_file:
            zip_file.write(response.content)
        print(f"CVE file downloaded and saved as: {zip_file_path}")

        # Unzip the downloaded file

        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
            zip_ref.extractall(output_folder)
        print(f"Unzipped CVE file saved in: {output_folder}")

        # Remove the downloaded ZIP file
        os.remove(zip_file_path)
        print(f"Downloaded ZIP file removed: {zip_file_path}")
    else:
        print(f"Failed to download CVE file")

def process_json_file(file_path):
    with open(file_path, "r",encoding='utf8') as json_file:
        try:
            data = json.load(json_file)

            return data['cveMetadata'], data['containers']['cna']
        except json.JSONDecodeError:
            print(f"Error reading JSON file: {file_path}")
    json_file.close()

# def read_json_files(root_dir,cve_list):
#     json_files = glob.glob(os.path.join(root_dir, "**/*.json"), recursive=True)
#     for file_path in json_files:
#         cve = get_cve_detail(file_path)
#         print(cve)
#         cve_list.extend(cve)


def read_json_files(root_dir):
    cve_list = []

    start_time = time.time()

    with concurrent.futures.ThreadPoolExecutor() as executor:
        for root, dirs, files in os.walk(root_dir):
            for file in files:
                if file.endswith(".json"):
                    file_path = os.path.join(root, file)
                    future = executor.submit(get_cve_detail, file_path)
                    cve_list.append(future.result())

    end_time = time.time()
    execution_time = end_time - start_time
    print("Program finished in", execution_time, "seconds.")
    print("Total CVEs:", len(cve_list))
    return cve_list
    
def get_cve_detail(file_path):
    tmp = {}
    # print(file_path)
    meta_data, data = process_json_file(file_path)
    tmp['cve_id'] = meta_data['cveId']
    if meta_data['state'] == "REJECTED":
        tmp['base_severity'] = None
        tmp['confidentiality_impact'] = None
        tmp['integrity_impact'] = None
        tmp['availability_impact'] = None
        tmp['vector'] = None
        tmp['impact'] = None
        tmp['description'] = data['rejectedReasons'][0]['value']
    else:
        tmp['description'] =  data['descriptions'][0]['value']
        tmp['impact'] = get_cve_impact(data['problemTypes'][0]) if "problemTypes" in data else None
        
    tmp['state'] = meta_data['state']

    tmp['base_severity'] = None
    tmp['confidentiality_impact'] = None
    tmp['integrity_impact'] = None
    tmp['availability_impact'] = None
    tmp['vector'] = None

    if 'metrics' in data:
        if "cvssV3_0" in data['metrics'][0]:
            tmp['base_severity'] = data['metrics'][0]['cvssV3_0'].get('baseSeverity', '')
            tmp['confidentiality_impact'] = data['metrics'][0]['cvssV3_0'].get('confidentialityImpact', '')
            tmp['integrity_impact'] = data['metrics'][0]['cvssV3_0'].get('integrityImpact', '')
            tmp['availability_impact'] = data['metrics'][0]['cvssV3_0'].get('availabilityImpact', '')
            tmp['vector'] = data['metrics'][0]['cvssV3_0'].get('vectorString', '')

        elif "cvssV3_1" in data['metrics'][0]:
            tmp['base_severity'] = data['metrics'][0]['cvssV3_1'].get('baseSeverity', '')
            tmp['vector'] = data['metrics'][0]['cvssV3_1'].get('vectorString', '')
            tmp['confidentiality_impact'], tmp['integrity_impact'], tmp['availability_impact'] = process_cvss_vector(tmp['vector'])
    
    return tmp
    
    
# Usage example:

def bulk_insert_cve_to_db(cve_list):
    db_file = 'cve_data.db'

    # SQLite database connection
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    # Extract required fields and form a list of tuples
    data_list = [(item['cve_id'], item['description'], item['base_severity'], item['confidentiality_impact'], item['integrity_impact'],item['availability_impact'],item['impact'],item['vector'],item['state']) for item in cve_list]
    try:

        # Insert the data
        cursor.executemany('''
            INSERT INTO mitre_cve (cve_id, description, base_severity, confidentiality_impact,
            integrity_impact, availability_impact, impact, vector, state)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', data_list)
        
        # Commit the changes and close the connection
        conn.commit()
        
        
    except Exception as error:
        # handle the exception
        print("An exception occurred:", error) # An exception occurred: division by zero 

    conn.close()


def find_missing_cve_in_nvdcve():
    db_file = 'cve_data.db'

    # SQLite database connection
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    cursor.execute("SELECT cve_id FROM mitre_cve WHERE base_severity is NULL")
    rows = cursor.fetchall()
    missing_cve = [row[0] for row in rows]
    for cve in missing_cve:
        cursor.execute("SELECT base_severity, confidentiality_impact, integrity_impact, availability_impact FROM cve_data WHERE cve_id=?", (cve,))
        existing_entry = cursor.fetchone()
        if existing_entry:
            # Update the 'description' field for the existing entry
            cursor.execute("UPDATE mitre_cve SET base_severity=?, confidentiality_impact=?, integrity_impact=?, availability_impact=? WHERE cve_id=?", (existing_entry[0], existing_entry[1], existing_entry[2], existing_entry[3], cve))           
            print("Updated CIA impact for: " + cve)
        else:

            print("Did not exist CVE: " + cve)
    conn.commit()
    conn.close()
def main():
    download_cve_file()
    for year in range(1999, 2024):
        root_directory = f"cve-json/cvelistV5-main/cves/{year}"
        init_db()
        cve_list = []
        cve_list = read_json_files(root_directory)
        print(year, len(cve_list))
        bulk_insert_cve_to_db(cve_list)
    
    find_missing_cve_in_nvdcve()

if __name__ == "__main__":
    main()


