import csv
import sqlite3


def process_cve_file(input_file, output_file):
    """
    Process the CVE file, find the CVE details in the SQLite database, and save them to a CSV file.

    Args:
        input_file (str): Path to the input CSV file containing CVE IDs.
        output_file (str): Path to the output CSV file to save the CVE details.
    """
    vulnerabilities = []
    try:
        with open(input_file, 'r', newline='', encoding='utf-8') as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:
                vulnerabilities.append(row[0])
    except (FileNotFoundError, IOError):
        print(f"Error reading CSV file: {input_file}")
        return
    
    vul_details = []
    for vul in vulnerabilities:
        try:
            if vul.startswith("CVE"):
                details = find_cve_detail(vul)
                if details:
                    vul_details.append(details)
            elif vul.startswith("RHSA"):
                details = find_rhsa_detail(vul)
                if details:
                    vul_details.append(details)
            elif vul.startswith("ALAS"):
                details = find_alas_detail(vul)
                if details:
                    vul_details.append(details)
        except Exception as e:
            print(f"Error fetching CVE details for: {vul}")
            print(e)
    
    save_vul_details_to_csv(vul_details, output_file)
    print(f"CVE details saved to: {output_file}")


def find_cve_detail(cve_id):
    """
    Find CVE detail in the SQLite database based on the given CVE ID.

    Args:
        cve_id (str): CVE ID to search for.

    Returns:
        dict: Dictionary containing the CVE details if found, or None if not found.
    """
    conn = sqlite3.connect('cve_data.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM cve_data WHERE cve_id = ?', (cve_id,))
    result = cursor.fetchone()

    conn.close()

    if result:
        cve_id = result[0]
        description = result[1]
        base_severity= result[2]
        confidentiality_impact = result[3]
        integrity_impact = result[4]
        availability_impact = result[5]

        cve_detail = {
            'CVE ID': cve_id,
            'Description': description,
            'Base Severity': base_severity,
            'Confidentiality Impact': confidentiality_impact,
            'Integrity Impact': integrity_impact,
            'Availability Impact': availability_impact
        }

        return cve_detail
    else:
        print('Cannot find details for CVE ID: %s' % cve_id)
        return None


def find_rhsa_detail(rhsa_id):
    """
    Find RHSA detail in the SQLite database based on the given RHSA ID.

    Args:
        rhsa_id (str): RHSA ID to search for.

    Returns:
        dict: Dictionary containing the RHSA details if found, or None if not found.
    """
    conn = sqlite3.connect('cve_data.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM rhsa_data WHERE rhsa_id = ?', (rhsa_id,))
    result = cursor.fetchone()

    conn.close()

    if result:
        cve_id = result[0]
        base_severity= result[1]
        description = result[2]
        confidentiality_impact = None
        integrity_impact = None
        availability_impact = None

        cve_detail = {
            'CVE ID': cve_id,
            'Description': description,
            'Base Severity': base_severity,
            'Confidentiality Impact': confidentiality_impact,
            'Integrity Impact': integrity_impact,
            'Availability Impact': availability_impact
        }

        return cve_detail
    else:
        print('Cannot find details for CVE ID: %s' % rhsa_id)
        return None


def find_alas_detail(alas_id):
    """
    Find RHSA detail in the SQLite database based on the given RHSA ID.

    Args:
        alas_id (str): ALAS ID to search for.

    Returns:
        dict: Dictionary containing the RHSA details if found, or None if not found.
    """
    conn = sqlite3.connect('cve_data.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM alas_data WHERE alas_id = ?', (alas_id,))
    result = cursor.fetchone()

    conn.close()

    if result:
        alas_id = result[0]
        base_severity= result[2]
        description = result[1]
        confidentiality_impact = None
        integrity_impact = None
        availability_impact = None

        cve_detail = {
            'CVE ID': alas_id,
            'Description': description,
            'Base Severity': base_severity,
            'Confidentiality Impact': confidentiality_impact,
            'Integrity Impact': integrity_impact,
            'Availability Impact': availability_impact
        }

        return cve_detail
    else:
        print('Cannot find details for CVE ID: %s' % alas_id)
        return None

def save_vul_details_to_csv(vul_details, output_file):
    """
    Save the CVE details to a CSV file.

    Args:
        vul_details (list): List of dictionaries containing the CVE details.
        output_file (str): Path to the output CSV file.
    """
    with open(output_file, 'w', newline='') as csvfile:
        fieldnames = ['CVE ID', 'Description', 'Base Severity', 'Confidentiality Impact', 'Integrity Impact', 'Availability Impact']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        writer.writeheader()
        writer.writerows(vul_details)
        
    print("CVE details saved to CSV file.")


def main():
    # Example usage:
    input_file = "list_cve.csv"
    output_file = "vul_details.csv"

    process_cve_file(input_file, output_file)


if __name__ == "__main__":
    main()
