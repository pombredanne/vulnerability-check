import csv
import sqlite3

class CVEProcessor:
    def __init__(self, database_file='cve_data.db', input_file='list_cve.csv', output_file='output_detail.csv'):
        """
        Initialize the CVEProcessor with the path to the SQLite database file.

        Args:
            database_file (str): Path to the SQLite database file.
        """
        self.database_file = database_file
        self.input_file = input_file
        self.output_file = output_file

    def process_cve_file(self, input_file, output_file):
        """
        Process the CVE file, find the CVE details in the SQLite database, and save them to a CSV file.

        Args:
            input_file (str): Path to the input CSV file containing CVE IDs.
            output_file (str): Path to the output CSV file to save the CVE details.
        """
        vulnerabilities = []
        try:
            with open(input_file, 'r', newline='', encoding='utf-8') as cve_file:
                reader = csv.reader(cve_file)
                for row in reader:
                    vulnerabilities.append(row[0])
        except (FileNotFoundError, IOError):
            print(f"Error reading CSV file: {input_file}")
            return

        vul_details = []
        for vul in vulnerabilities:
            try:
                if vul.startswith("CVE"):
                    details = self.find_cve_detail(vul)
                    if details:
                        vul_details.append(details)
                elif vul.startswith("RHSA"):
                    details = self.find_rhsa_detail(vul)
                    if details:
                        vul_details.append(details)
                elif vul.startswith("ALAS"):
                    details = self.find_alas_detail(vul)
                    if details:
                        vul_details.append(details)
                elif vul.startswith("DLA"):
                    details = self.find_dla_detail(vul)
                    if details:
                        vul_details.append(details)
            except Exception as e:
                print(f"Error fetching CVE details for: {vul}")
                print(e)

        self.save_vul_details_to_csv(vul_details, output_file)
        print(f"CVE details saved to: {output_file}")

    def find_cve_detail(self, cve_id):
        """
        Find CVE detail in the SQLite database based on the given CVE ID.

        Args:
            cve_id (str): CVE ID to search for.

        Returns:
            dict: Dictionary containing the CVE details if found, or None if not found.
        """
        conn = sqlite3.connect(self.database_file)
        cursor = conn.cursor()

        cursor.execute('SELECT cve_id, description, base_severity, confidentiality_impact, integrity_impact, availability_impact  FROM cve_data WHERE cve_id = ?', (cve_id,))
        result = cursor.fetchone()

        conn.close()

        if result:
            cve_id = result[0]
            description = result[1]
            base_severity = result[2]
            confidentiality_impact = result[3]
            integrity_impact = result[4]
            availability_impact = result[5]

            cve_detail = {
                'CVE ID': cve_id,
                'Description': description,
                'Base Severity': base_severity,
                'Confidentiality Impact': confidentiality_impact,
                'Integrity Impact': integrity_impact,
                'Availability Impact': availability_impact
            }

            return cve_detail
        else:
            print('Cannot find details for CVE ID: %s' % cve_id)
            return None

    def find_rhsa_detail(self, rhsa_id):
        """
        Find RHSA detail in the SQLite database based on the given RHSA ID.

        Args:
            rhsa_id (str): RHSA ID to search for.

        Returns:
            dict: Dictionary containing the RHSA details if found, or None if not found.
        """
        conn = sqlite3.connect(self.database_file)
        cursor = conn.cursor()

        cursor.execute('SELECT rhsa_id, severity, description FROM rhsa_data WHERE rhsa_id = ?', (rhsa_id,))
        result = cursor.fetchone()

        conn.close()

        if result:
            cve_id = result[0]
            base_severity = result[1]
            description = result[2]
            confidentiality_impact = None
            integrity_impact = None
            availability_impact = None

            cve_detail = {
                'CVE ID': cve_id,
                'Description': description,
                'Base Severity': base_severity,
                'Confidentiality Impact': confidentiality_impact,
                'Integrity Impact': integrity_impact,
                'Availability Impact': availability_impact
            }

            return cve_detail
        else:
            print('Cannot find details for CVE ID: %s' % rhsa_id)
            return None

    def find_alas_detail(self, alas_id):
        """
        Find RHSA detail in the SQLite database based on the given ALAS ID.

        Args:
            alas_id (str): ALAS ID to search for.

        Returns:
            dict: Dictionary containing the ALAS details if found, or None if not found.
        """
        conn = sqlite3.connect(self.database_file)
        cursor = conn.cursor()
        if alas_id.startswith("ALAS2"):
            alas_id = alas_id.replace("ALAS2", "ALAS")
        cursor.execute('SELECT alas_id, severity, description FROM alas_data WHERE alas_id = ?', (alas_id,))
        result = cursor.fetchone()

        conn.close()

        if result:
            alas_id = result[0]
            base_severity = result[2]
            description = result[1]
            confidentiality_impact = None
            integrity_impact = None
            availability_impact = None

            cve_detail = {
                'CVE ID': alas_id,
                'Description': description,
                'Base Severity': base_severity,
                'Confidentiality Impact': confidentiality_impact,
                'Integrity Impact': integrity_impact,
                'Availability Impact': availability_impact
            }

            return cve_detail
        else:
            print('Cannot find details for CVE ID: %s' % alas_id)
            return None
        
    def find_dla_detail(self, dla_id):
        """
        Find DLA detail in the SQLite database based on the given DLA ID.

        Args:
            dla_id (str): DLA ID to search for.

        Returns:
            dict: Dictionary containing the DLA details if found, or None if not found.
        """
        conn = sqlite3.connect(self.database_file)
        cursor = conn.cursor()
        cursor.execute('SELECT dla_id, severity, description FROM dla_data WHERE dla_id = ?', (dla_id,))
        result = cursor.fetchone()

        conn.close()

        if result:
            dla_id = result[0]
            base_severity = result[1]
            description = result[2]
            confidentiality_impact = None
            integrity_impact = None
            availability_impact = None

            cve_detail = {
                'CVE ID': dla_id,
                'Description': description,
                'Base Severity': base_severity,
                'Confidentiality Impact': confidentiality_impact,
                'Integrity Impact': integrity_impact,
                'Availability Impact': availability_impact
            }

            return cve_detail
        else:
            print('Cannot find details for CVE ID: %s' % dla_id)
            return None


    def save_vul_details_to_csv(self, vul_details, output_file):
        """
        Save the CVE details to a CSV file.

        Args:
            vul_details (list): List of dictionaries containing the CVE details.
            output_file (str): Path to the output CSV file.
        """
        with open(output_file, 'w', newline='') as cve_file:
            fieldnames = ['CVE ID', 'Base Severity', 'Description', 'Confidentiality Impact',
                          'Integrity Impact', 'Availability Impact']
            writer = csv.DictWriter(cve_file, fieldnames=fieldnames)

            writer.writeheader()
            writer.writerows(vul_details)

        print("CVE details saved to CSV file.")

    def main(self):

        self.process_cve_file(self.input_file, self.output_file)


if __name__ == "__main__":
    input_file = "list_cve.csv"
    output_file = "output_detail.csv"
    database_file = "cve_data.db"
    importer = CVEProcessor(database_file,input_file,output_file)
    importer.main()