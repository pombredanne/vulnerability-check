import requests
import sqlite3
import datetime
import concurrent.futures


class RHSADataImporter:
    def __init__(self, database_file='cve_data.db'):
        """
        Initialize the CVEProcessor with the path to the SQLite database file.

        Args:
            database_file (str): Path to the SQLite database file.
        """
        self.db_file = database_file

    def get_data_from_url(self, url):
        """
        Retrieve data from the specified URL and return it as JSON.

        Args:
            url (str): The URL to retrieve data from.

        Returns:
            dict: The retrieved data as a JSON dictionary, or None if the request fails.
        """
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        else:
            return None

    def process_url(self, url, cursor):
        """
        Process the data retrieved from the specified URL and save it to the database.

        Args:
            url (str): The URL to retrieve data from.
            cursor (str): Cursor SQLite database.
        """
        data = self.get_data_from_url(url)

        if data is not None:
            # Process and save the data to the database
            self.save_rhsa_to_database(data, cursor)

            print(url)

    def create_table(self, cursor):
        """
        Create the 'rhsa_data' table in the database if it doesn't exist.

        Args:
            cursor (str): Cursor SQLite database.
        """
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS rhsa_data (
                rhsa_id TEXT PRIMARY KEY,
                severity TEXT,
                description TEXT,
                CVEs TEXT,
                released_on TEXT,
                resource_url TEXT
            )
        """)

    def save_rhsa_to_database(self, data, cursor):
        """
        Save the RHSA data to the database.

        Args:
            data (dict): The RHSA data.
            cursor (str): Cursor SQLite database.
        """
        for entry in data:
            rhsa_id = entry['RHSA']
            severity = entry['severity']
            CVEs = ', '.join(entry['CVEs'])
            released_on = entry['released_on']
            resource_url = entry['resource_url']

            # Check if rhsa_id already exists in the database
            cursor.execute("SELECT rhsa_id FROM rhsa_data WHERE rhsa_id=?", (rhsa_id,))
            existing_entry = cursor.fetchone()

            if existing_entry:
                print("Skipping existing data for: " + rhsa_id)
            else:
                cursor.execute("""
                    INSERT INTO rhsa_data (rhsa_id, severity, CVEs, released_on, resource_url)
                    VALUES (?, ?, ?, ?, ?)
                """, (rhsa_id, severity, CVEs, released_on, resource_url))
                print("Saved data for: " + rhsa_id)

        cursor.connection.commit()

    def save_rhsa_desc_to_database(self, data):
        """
        Save the RHSA description to the database.

        Args:
            data (dict): The RHSA data.
        """
        conn = sqlite3.connect(self.db_file, check_same_thread=False)
        cursor = conn.cursor()
        if data:
            rhsa_id = data['cvrfdoc']['document_tracking']['identification']['id']
            description = data['cvrfdoc']['vulnerability'][0]['notes']['note']
            try:
                cursor.execute("SELECT rhsa_id FROM rhsa_data WHERE rhsa_id=?", (rhsa_id,))
                existing_entry = cursor.fetchone()

                if existing_entry:
                    # Update the 'description' field for the existing entry
                    cursor.execute("UPDATE rhsa_data SET description=? WHERE rhsa_id=?", (description, rhsa_id))
                    print("Updated description for: " + rhsa_id)
                else:
                    print("Did not exist RHSA ID: " + rhsa_id)
            except Exception as error:
                # handle the exception
                print("An exception occurred:", error)

        cursor.connection.commit()
        conn.close()

    def process_rhsa_data(self, cursor):
        """
        Process RHSA data for each year and save it to the database.

        Args:
            cursor (str): Cursor SQLite database.
        """
        current_year = datetime.datetime.now().year
        max_end_year = current_year + 1
        for start_year in range(2000, max_end_year):
            end_year = start_year + 1
            url = f"https://access.redhat.com/hydra/rest/securitydata/cvrf.json?per_page=20000&before={end_year}-01-01&after={start_year}-01-01"
            data = self.get_data_from_url(url)

            if data is not None and len(data) > 0:
                self.save_rhsa_to_database(data, cursor)
                print("Data saved to database successfully.")
            else:
                print("Failed to retrieve data from the URL.")

    def get_all_resource_urls(self, cursor):
        """
        Get all resource URLs from the database where the description is NULL.

        Args:
            cursor (str): Cursor SQLite database.

        Returns:
            list: A list of resource URLs.
        """
        cursor.execute("SELECT resource_url FROM rhsa_data WHERE description is NULL")
        rows = cursor.fetchall()
        resource_urls = [row[0] for row in rows]
        return resource_urls

    def rhsa_description(self, url):
        """
        Retrieve the RHSA description from the URL and save it to the database.

        Args:
            url (str): The URL of the RHSA description.
        """
        data = self.get_data_from_url(url)
        self.save_rhsa_desc_to_database(data)

    def main(self):
        """
        The main entry point of the program.
        """
        conn = sqlite3.connect(self.db_file, check_same_thread=False)
        cursor = conn.cursor()
        self.create_table(cursor)

        # Import rhsa into db following API https://access.redhat.com/documentation/en-us/red_hat_security_data_api/1.0/html/red_hat_security_data_api/cvrf#parameters
        self.process_rhsa_data(cursor)

        # Update the description for all RHSA based on resource_url like: https://access.redhat.com/hydra/rest/securitydata/cvrf/RHSA-2023:1403.json
        resource_urls = self.get_all_resource_urls(cursor)
        print(len(resource_urls))

        MAX_WORKERS = 10  # Set the maximum number of concurrent workers

        with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
            futures = [executor.submit(self.rhsa_description, url) for url in resource_urls]

            # Wait for the tasks to complete
            concurrent.futures.wait(futures)

        conn.close()


# if __name__ == "__main__":
#     importer = RHSADataImporter()
#     importer.main()
